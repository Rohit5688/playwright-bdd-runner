var K=Object.create;var C=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var Q=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var X=(e,t)=>{for(var s in t)C(e,s,{get:t[s],enumerable:!0})},E=(e,t,s,v)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of J(t))!U.call(e,a)&&a!==s&&C(e,a,{get:()=>t[a],enumerable:!(v=H(t,a))||v.enumerable});return e};var y=(e,t,s)=>(s=e!=null?K(Q(e)):{},E(t||!e||!e.__esModule?C(s,"default",{value:e,enumerable:!0}):s,e)),Y=e=>E(C({},"__esModule",{value:!0}),e);var _={};X(_,{activate:()=>Z});module.exports=Y(_);var n=y(require("vscode")),O=y(require("path"));var w=y(require("vscode")),F=y(require("path")),G=require("child_process"),k=null;function S(e,t,s,v){let a=w.workspace.workspaceFolders;if(!a){w.window.showErrorMessage("No workspace folder open.");return}let r=a[0].uri.fsPath,c=w.workspace.getConfiguration("playwrightBdd"),g=c.get("enableFeatureGen",!0),f=c.get("configPath")||"./playwright.config.ts",i=c.get("tsconfigPath")||"",d=c.get("tags")||"",o=c.get("featureFolder","features"),l=c.get("featureGenCommand"),p=c.get("testCommand"),D=f,A=i?`${i}`:"",$=d?`--grep "${d}"`:"";if(l=l.replace("${configPath}",D).replace("${tsconfigArg}",A).replace("${tagsArg}",$),p=p.replace("${configPath}",D).replace("${tsconfigArg}",A).replace("${tagsArg}",$),s?.uri?.fsPath){let u=F.resolve(r,o),b=F.relative(u,s.uri.fsPath);if(p+=` "${b}"`,s.label&&s.parent){let x=s.label.includes("Example")&&!s.label.includes("[")?s.parent.label:s.label;p+=` --grep "${x}"`}}let m=(u,b,P)=>{v?.appendLine(`Running ${b}: ${u}`),k=(0,G.exec)(u,{cwd:r},(x,h,T)=>{k=null,x?(v?.appendLine(`${b} failed:
${T}`),e?.appendOutput(T),e?.failed(s??t?.items.get("root"),new w.TestMessage(T))):(v?.appendLine(`${b} completed:
${h}`),e?.appendOutput(h),e?.passed(s??t?.items.get("root")),P&&P())})};g?m(l,"Feature generation",()=>{m(p,"BDD test run",()=>{e?.end()})}):m(p,"BDD test run",()=>{e?.end()})}function N(){k?(k.kill(),w.window.showInformationMessage("\u{1F6D1} BDD test execution terminated.")):w.window.showInformationMessage("No BDD test is currently running.")}var L=y(require("vscode")),R=class{provideCodeLenses(t){let s=[],a=t.getText().split(`
`);for(let r=0;r<a.length;r++){let c=a[r].match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(c){let g;for(let d=r-1;d>=0;d--){let o=a[d].match(/^\s*@(\w+)/);if(o){g=`@${o[1]}`;break}else{if(a[d].trim()==="")continue;break}}let f=new L.Range(r,0,r,a[r].length),i=g??c[1];s.push(new L.CodeLens(f,{title:"\u25B6 Run Scenario",command:"playwright-bdd.runScenario",arguments:[i]}))}}return s}};async function Z(e){console.log("\u2705 Playwright BDD extension activated");let t=n.tests.createTestController("playwrightBdd","Playwright BDD Tests");e.subscriptions.push(t);let s=n.window.createOutputChannel("Playwright BDD");e.subscriptions.push(s);let a=n.workspace.getConfiguration("playwrightBdd").get("featureFolder","features"),r=async i=>{t.items.replace([]);let d=await n.workspace.findFiles(`${a}/**/*.feature`);for(let o of d){let l=o.fsPath,p=O.basename(o.fsPath),D=t.createTestItem(l,p,o);t.items.add(D);let $=(await n.workspace.fs.readFile(o)).toString().split(`
`),m=null;for(let u=0;u<$.length;u++){let b=$[u],P=b.match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(P){let h=P[1].trim();if(i&&!h.includes(i)&&!$[u-1]?.includes(i))continue;let T=`${o.fsPath}::${h}`,B=t.createTestItem(T,h,o);D.children.add(B),m=B}if(b.match(/^\s*Examples:/)&&m){let h=1,T=!1;for(let B=u+1;B<$.length;B++){let M=$[B].trim();if(M.startsWith("|")){if(!T){T=!0;continue}let j=M.split("|").map(z=>z.trim()).filter(Boolean),I=`Validate ${m.label} - Example ${h}: [${j.join(", ")}]`.replace(/[^\w\s-]/g,"").replace(/\s+/g,"-"),V=`${m.id}::${I}`,W=t.createTestItem(V,I,o);m.children.add(W),h++}else if(M==="")break}}}}};await r();let c=n.workspace.createFileSystemWatcher(`${a}/**/*.feature`);c.onDidCreate(()=>r()),c.onDidChange(()=>r()),c.onDidDelete(()=>r()),e.subscriptions.push(c),t.createRunProfile("Run",n.TestRunProfileKind.Run,(i,d)=>{let o=t.createTestRun(i);if(s.show(!0),i.include)for(let l of i.include)o.enqueued(l),o.started(l),S(o,t,l,s);else S(o,t,void 0,s)},!0),e.subscriptions.push(n.commands.registerCommand("playwright-bdd.runTests",()=>{S(void 0,t,void 0,s)})),e.subscriptions.push(n.languages.registerCodeLensProvider({language:"feature",scheme:"file"},new R)),e.subscriptions.push(n.commands.registerCommand("playwright-bdd.runScenario",i=>{let d=n.workspace.getConfiguration("playwrightBdd"),o=d.get("configPath")||"./playwright.config.ts",l=d.get("tsconfigPath")||"",p=l?`${l}`:"",D=n.window.createTerminal("Playwright BDD");D.show(),D.sendText(`npx playwright test ${p} --config=${o} --grep "${i}"`)})),e.subscriptions.push(n.commands.registerCommand("playwright-bdd.terminateTests",()=>{N()})),e.subscriptions.push(n.commands.registerCommand("playwright-bdd.filterScenarios",async()=>{let i=await n.window.showInputBox({prompt:"Enter scenario name or tag to filter"});await r(i)}));let g=n.window.createStatusBarItem(n.StatusBarAlignment.Left);g.text="$(beaker) Run BDD Tests",g.command="playwright-bdd.runTests",g.tooltip="Run all Playwright BDD tests",g.show(),e.subscriptions.push(g);let f=n.window.createStatusBarItem(n.StatusBarAlignment.Left);f.text="$(debug-stop) Stop BDD Tests",f.command="playwright-bdd.terminateTests",f.tooltip="Terminate running Playwright BDD tests",f.show(),e.subscriptions.push(f)}0&&(module.exports={activate});
