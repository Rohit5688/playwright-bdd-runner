var H=Object.create;var F=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var Y=(e,n)=>{for(var s in n)F(e,s,{get:n[s],enumerable:!0})},E=(e,n,s,u)=>{if(n&&typeof n=="object"||typeof n=="function")for(let l of Q(n))!X.call(e,l)&&l!==s&&F(e,l,{get:()=>n[l],enumerable:!(u=J(n,l))||u.enumerable});return e};var x=(e,n,s)=>(s=e!=null?H(U(e)):{},E(n||!e||!e.__esModule?F(s,"default",{value:e,enumerable:!0}):s,e)),Z=e=>E(F({},"__esModule",{value:!0}),e);var q={};Y(q,{activate:()=>_});module.exports=Z(q);var t=x(require("vscode")),j=x(require("path"));var D=x(require("vscode")),S=x(require("path")),N=require("child_process"),k=null;function G(e,n,s,u){let l=D.workspace.workspaceFolders;if(!l){D.window.showErrorMessage("No workspace folder open.");return}let y=l[0].uri.fsPath,a=D.workspace.getConfiguration("playwrightBdd"),w=a.get("enableFeatureGen",!0),v=a.get("configPath")||"./playwright.config.ts",$=a.get("tsconfigPath")||"",r=a.get("tags")||"",i=a.get("featureFolder","features"),o=a.get("featureGenCommand"),c=a.get("testCommand"),h=v,f=$?`${$}`:"",b=r?`--grep "${r}"`:"";if(o=o.replace("${configPath}",h).replace("${tsconfigArg}",f).replace("${tagsArg}",b),c=c.replace("${configPath}",h).replace("${tsconfigArg}",f).replace("${tagsArg}",b),s?.uri?.fsPath){let d=S.resolve(y,i),g=S.relative(d,s.uri.fsPath);if(c+=` "${g}"`,s.label&&s.parent){let C=s.label.includes("Example")&&!s.label.includes("[")?s.parent.label:s.label;c+=` --grep "${C}"`}}let p=(d,g,m)=>{u?.appendLine(`Running ${g}: ${d}`),k=(0,N.exec)(d,{cwd:y},(C,L,P)=>{k=null,C?(u?.appendLine(`${g} failed:
${P}`),e?.appendOutput(P),e?.failed(s??n?.items.get("root"),new D.TestMessage(P))):(u?.appendLine(`${g} completed:
${L}`),e?.appendOutput(L),e?.passed(s??n?.items.get("root")),m&&m())})};w?p(o,"Feature generation",()=>{p(c,"BDD test run",()=>{e?.end()})}):p(c,"BDD test run",()=>{e?.end()})}function O(){k?(k.kill(),D.window.showInformationMessage("\u{1F6D1} BDD test execution terminated.")):D.window.showInformationMessage("No BDD test is currently running.")}var B=x(require("vscode")),R=class{constructor(n){this.enableFeatureGen=n}provideCodeLenses(n){let s=[],u=n.getText(),l=u.split(`
`),y=u.match(/^\s*Feature:\s*(.+)/m);if(y){let a=y[1].trim(),w=new B.Range(0,0,0,l[0].length);s.push(new B.CodeLens(w,{title:"\u25B6 Run Feature",command:"playwright-bdd.runScenarioDynamic",arguments:[a,this.enableFeatureGen]}))}for(let a=0;a<l.length;a++){let w=l[a].match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(w){let v;for(let i=a-1;i>=0;i--){let o=l[i].match(/^\s*@(\w+)/);if(o){v=`@${o[1]}`;break}else{if(l[i].trim()==="")continue;break}}let $=new B.Range(a,0,a,l[a].length),r=v??w[1];s.push(new B.CodeLens($,{title:"\u25B6 Run Scenario",command:"playwright-bdd.runScenarioDynamic",arguments:[r,this.enableFeatureGen]}))}}return s}};async function _(e){console.log("\u2705 Playwright BDD extension activated");let n=t.tests.createTestController("playwrightBdd","Playwright BDD Tests");e.subscriptions.push(n);let s=t.window.createOutputChannel("Playwright BDD");e.subscriptions.push(s);let u=t.workspace.getConfiguration("playwrightBdd"),l=u.get("featureFolder","features"),y=u.get("enableFeatureGen",!1),a=async r=>{n.items.replace([]);let i=await t.workspace.findFiles(`${l}/**/*.feature`);for(let o of i){let c=o.fsPath,h=j.basename(o.fsPath),f=n.createTestItem(c,h,o);n.items.add(f);let p=(await t.workspace.fs.readFile(o)).toString().split(`
`),d=null;for(let g=0;g<p.length;g++){let m=p[g],C=m.match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(C){let P=C[1].trim();if(r&&!P.includes(r)&&!p[g-1]?.includes(r))continue;let A=`${o.fsPath}::${P}`,T=n.createTestItem(A,P,o);f.children.add(T),d=T}if(m.match(/^\s*Examples:/)&&d){let P=1,A=!1;for(let T=g+1;T<p.length;T++){let M=p[T].trim();if(M.startsWith("|")){if(!A){A=!0;continue}let W=M.split("|").map(K=>K.trim()).filter(Boolean),I=`Validate ${d.label} - Example ${P}: [${W.join(", ")}]`.replace(/[^\w\s-]/g,"").replace(/\s+/g,"-"),V=`${d.id}::${I}`,z=n.createTestItem(V,I,o);d.children.add(z),P++}else if(M==="")break}}}}};await a();let w=t.workspace.createFileSystemWatcher(`${l}/**/*.feature`);w.onDidCreate(()=>a()),w.onDidChange(()=>a()),w.onDidDelete(()=>a()),e.subscriptions.push(w),n.createRunProfile("Run",t.TestRunProfileKind.Run,(r,i)=>{let o=n.createTestRun(r);if(s.show(!0),r.include)for(let c of r.include)o.enqueued(c),o.started(c),G(o,n,c,s);else G(o,n,void 0,s)},!0),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runTests",()=>{G(void 0,n,void 0,s)})),e.subscriptions.push(t.languages.registerCodeLensProvider({language:"feature",scheme:"file"},new R(y))),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenarioDynamic",(r,i)=>{let o=t.workspace.getConfiguration("playwrightBdd"),c=o.get("configPath")||"./playwright.config.ts",h=o.get("tsconfigPath")||"",f=c,b=h||"",p=r?`--grep "${r}"`:"",d=o.get("featureGenCommand")||"npx bddgen --config=${configPath}",g=o.get("testCommand")||"npx playwright test ${tsconfigArg} --config=${configPath} ${tagsArg}";d=d.replace("${configPath}",f).replace("${tsconfigArg}",b).replace("${tagsArg}",p),g=g.replace("${configPath}",f).replace("${tsconfigArg}",b).replace("${tagsArg}",p);let m=t.window.createTerminal("Playwright BDD");m.show(),i?m.sendText(`${d} && ${g}`):m.sendText(g)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenario",r=>{let i=t.workspace.getConfiguration("playwrightBdd"),o=i.get("configPath")||"./playwright.config.ts",c=i.get("tsconfigPath")||"",h=c?`--project=${c}`:"",f=t.window.createTerminal("Playwright BDD");f.show(),f.sendText(`npx playwright test ${h} --config=${o} --grep "${r}"`)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenarioWithFeatureGen",r=>{let i=t.workspace.getConfiguration("playwrightBdd"),o=i.get("configPath")||"./playwright.config.ts",c=i.get("tsconfigPath")||"",h=r||i.get("tags")||"",f=o,b=c||"",p=h?`--grep "${h}"`:"",d=i.get("featureGenCommand")||"npx bddgen --config=${configPath}",g=i.get("testCommand")||"npx playwright test ${tsconfigArg} --config=${configPath} ${tagsArg}";d=d.replace("${configPath}",f).replace("${tsconfigArg}",b).replace("${tagsArg}",p),g=g.replace("${configPath}",f).replace("${tsconfigArg}",b).replace("${tagsArg}",p);let m=t.window.createTerminal("Playwright BDD");m.show(),m.sendText(`${d} && ${g}`)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.terminateTests",()=>{O()})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.filterScenarios",async()=>{let r=await t.window.showInputBox({prompt:"Enter scenario name or tag to filter"});await a(r)}));let v=t.window.createStatusBarItem(t.StatusBarAlignment.Left);v.text="$(beaker) Run BDD Tests",v.command="playwright-bdd.runTests",v.tooltip="Run all Playwright BDD tests",v.show(),e.subscriptions.push(v);let $=t.window.createStatusBarItem(t.StatusBarAlignment.Left);$.text="$(debug-stop) Stop BDD Tests",$.command="playwright-bdd.terminateTests",$.tooltip="Terminate running Playwright BDD tests",$.show(),e.subscriptions.push($)}0&&(module.exports={activate});
