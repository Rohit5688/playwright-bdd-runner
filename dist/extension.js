var X=Object.create;var S=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var ee=(e,t)=>{for(var s in t)S(e,s,{get:t[s],enumerable:!0})},K=(e,t,s,c)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of Z(t))!q.call(e,r)&&r!==s&&S(e,r,{get:()=>t[r],enumerable:!(c=Y(t,r))||c.enumerable});return e};var C=(e,t,s)=>(s=e!=null?X(_(e)):{},K(t||!e||!e.__esModule?S(s,"default",{value:e,enumerable:!0}):s,e)),te=e=>K(S({},"__esModule",{value:!0}),e);var ne={};ee(ne,{activate:()=>se});module.exports=te(ne);var o=C(require("vscode")),J=C(require("path"));var w=C(require("vscode")),A=C(require("path")),z=require("child_process"),I=null;function M(e,t,s,c){let r=w.workspace.workspaceFolders;if(!r){w.window.showErrorMessage("No workspace folder open.");return}let D=r[0].uri.fsPath,n=w.workspace.getConfiguration("playwrightBdd"),d=n.get("enableFeatureGen",!0),u=n.get("configPath")||"./playwright.config.ts",p=n.get("tsconfigPath")||"",i=n.get("tags")||"",m=n.get("featureFolder","features"),a=n.get("featureGenCommand"),l=n.get("testCommand"),F=u,y=p?`${p}`:"",O=i?`--grep "${i}"`:"";if(a=a.replace("${configPath}",F).replace("${tsconfigArg}",y).replace("${tagsArg}",O),l=l.replace("${configPath}",F).replace("${tsconfigArg}",y).replace("${tagsArg}",O),s?.uri?.fsPath){let h=A.resolve(D,m),v=A.relative(h,s.uri.fsPath);if(l+=` "${v}"`,s.label&&s.parent){let g=s.label;l+=` --grep "${g}"`}}let f=(h,v,g)=>{c?.appendLine(`Running ${v}: ${h}`),I=(0,z.exec)(h,{cwd:D},(x,B,k)=>{if(I=null,x)c?.appendLine(`${v} failed:
${k}`),e?.appendOutput(k),e?.failed(s??t?.items.get("root"),new w.TestMessage(k));else if(c?.appendLine(`${v} completed:
${B}`),e?.appendOutput(B),e?.passed(s??t?.items.get("root")),g){g();return}e?.end()})};d?f(a,"Feature generation",()=>{f(l,"BDD test run")}):f(l,"BDD test run")}function H(){I?(I.kill(),w.window.showInformationMessage("\u{1F6D1} BDD test execution terminated.")):w.window.showInformationMessage("No BDD test is currently running.")}var T=C(require("vscode")),G=class{constructor(t){this.enableFeatureGen=t}provideCodeLenses(t){let s=[],c=t.getText(),r=c.split(`
`),D=c.match(/^\s*Feature:\s*(.+)/m);if(D){let n=D[1].trim(),d=new T.Range(0,0,0,r[0].length);s.push(new T.CodeLens(d,{title:"\u25B6 Run Feature",command:"playwright-bdd.runScenarioDynamic",arguments:[n,this.enableFeatureGen]}))}for(let n=0;n<r.length;n++){let d=r[n].match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(d){let u;for(let m=n-1;m>=0;m--){let a=r[m].match(/^\s*@(\w+)/);if(a){u=`@${a[1]}`;break}else{if(r[m].trim()==="")continue;break}}let p=new T.Range(n,0,n,r[n].length),i=u??d[1];s.push(new T.CodeLens(p,{title:"\u25B6 Run Scenario",command:"playwright-bdd.runScenarioDynamic",arguments:[i,this.enableFeatureGen]}))}}return s}};async function se(e){console.log("\u2705 Playwright BDD extension activated");let t=o.tests.createTestController("playwrightBdd","Playwright BDD Tests");e.subscriptions.push(t);let s=o.window.createOutputChannel("Playwright BDD");e.subscriptions.push(s);let c=o.workspace.getConfiguration("playwrightBdd"),r=c.get("featureFolder","features"),D=c.get("enableFeatureGen",!1),n=async i=>{t.items.replace([]);let m=await o.workspace.findFiles(`${r}/**/*.feature`);for(let a of m){let l=a.fsPath,F=J.basename(a.fsPath),y=t.createTestItem(l,F,a);t.items.add(y);let f=(await o.workspace.fs.readFile(a)).toString().split(`
`),h=null,v="";for(let g=0;g<f.length;g++){let x=f[g],B=x.match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(B){let b=B[1].trim();if(i&&!b.includes(i)&&!f[g-1]?.includes(i))continue;let R=`${a.fsPath}::${b}`,$=t.createTestItem(R,b,a);y.children.add($),h=$,v=b}if(x.match(/^\s*Examples:/)&&h){let b=1,R=!1,$=[];for(let E=g+1;E<f.length;E++){let j=f[E].trim();if(j.startsWith("|")){let W=j.split("|").map(P=>P.trim()).filter(Boolean);if(!R){$=W,R=!0;continue}let Q=Object.fromEntries($.map((P,N)=>[P,W[N]])),L=v;for(let[P,N]of Object.entries(Q))L=L.replace(new RegExp(`<${P}>`,"g"),N);let U=`${h.id}::${L}`,V=t.createTestItem(U,L,a);h.children.add(V),b++}else if(j==="")break}}}}};await n();let d=o.workspace.createFileSystemWatcher(`${r}/**/*.feature`);d.onDidCreate(()=>n()),d.onDidChange(()=>n()),d.onDidDelete(()=>n()),e.subscriptions.push(d),t.createRunProfile("Run",o.TestRunProfileKind.Run,(i,m)=>{let a=t.createTestRun(i);if(s.show(!0),i.include)for(let l of i.include)a.enqueued(l),a.started(l),M(a,t,l,s);else M(a,t,void 0,s)},!0),e.subscriptions.push(o.commands.registerCommand("playwright-bdd.runTests",()=>{M(void 0,t,void 0,s)})),e.subscriptions.push(o.languages.registerCodeLensProvider({language:"feature",scheme:"file"},new G(D))),e.subscriptions.push(o.commands.registerCommand("playwright-bdd.terminateTests",()=>{H()})),e.subscriptions.push(o.commands.registerCommand("playwright-bdd.filterScenarios",async()=>{let i=await o.window.showInputBox({prompt:"Enter scenario name or tag to filter"});await n(i)}));let u=o.window.createStatusBarItem(o.StatusBarAlignment.Left);u.text="$(beaker) Run BDD Tests",u.command="playwright-bdd.runTests",u.tooltip="Run all Playwright BDD tests",u.show(),e.subscriptions.push(u);let p=o.window.createStatusBarItem(o.StatusBarAlignment.Left);p.text="$(debug-stop) Stop BDD Tests",p.command="playwright-bdd.terminateTests",p.tooltip="Terminate running Playwright BDD tests",p.show(),e.subscriptions.push(p)}0&&(module.exports={activate});
