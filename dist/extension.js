var U=Object.create;var G=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Y=Object.getPrototypeOf,Z=Object.prototype.hasOwnProperty;var _=(e,a)=>{for(var s in a)G(e,s,{get:a[s],enumerable:!0})},K=(e,a,s,m)=>{if(a&&typeof a=="object"||typeof a=="function")for(let d of X(a))!Z.call(e,d)&&d!==s&&G(e,d,{get:()=>a[d],enumerable:!(m=V(a,d))||m.enumerable});return e};var F=(e,a,s)=>(s=e!=null?U(Y(e)):{},K(a||!e||!e.__esModule?G(s,"default",{value:e,enumerable:!0}):s,e)),q=e=>K(G({},"__esModule",{value:!0}),e);var te={};_(te,{activate:()=>ee});module.exports=q(te);var t=F(require("vscode")),J=F(require("path"));var y=F(require("vscode")),M=F(require("path")),z=require("child_process"),I=null;function O(e,a,s,m){let d=y.workspace.workspaceFolders;if(!d){y.window.showErrorMessage("No workspace folder open.");return}let b=d[0].uri.fsPath,r=y.workspace.getConfiguration("playwrightBdd"),w=r.get("enableFeatureGen",!0),v=r.get("configPath")||"./playwright.config.ts",$=r.get("tsconfigPath")||"",n=r.get("tags")||"",i=r.get("featureFolder","features"),o=r.get("featureGenCommand"),c=r.get("testCommand"),h=v,u=$?`${$}`:"",P=n?`--grep "${n}"`:"";if(o=o.replace("${configPath}",h).replace("${tsconfigArg}",u).replace("${tagsArg}",P),c=c.replace("${configPath}",h).replace("${tsconfigArg}",u).replace("${tagsArg}",P),s?.uri?.fsPath){let g=M.resolve(b,i),l=M.relative(g,s.uri.fsPath);if(c+=` "${l}"`,s.label&&s.parent){let p=s.label;c+=` --grep "${p}"`}}let f=(g,l,p)=>{m?.appendLine(`Running ${l}: ${g}`),I=(0,z.exec)(g,{cwd:b},(k,C,S)=>{if(I=null,k)m?.appendLine(`${l} failed:
${S}`),e?.appendOutput(S),s?e.failed(s,new y.TestMessage(S)):m?.appendLine("No valid test item to mark as failed.");else if(m?.appendLine(`${l} completed:
${C}`),e?.appendOutput(C),s?e.passed(s):m?.appendLine("No valid test item to mark as passed."),p){p();return}e?.end()})};w?f(o,"Feature generation",()=>{f(c,"BDD test run")}):f(c,"BDD test run")}function H(){I?(I.kill(),y.window.showInformationMessage("\u{1F6D1} BDD test execution terminated.")):y.window.showInformationMessage("No BDD test is currently running.")}var B=F(require("vscode")),j=class{constructor(a){this.enableFeatureGen=a}provideCodeLenses(a){let s=[],m=a.getText(),d=m.split(`
`),b=m.match(/^\s*Feature:\s*(.+)/m);if(b){let r=b[1].trim(),w=new B.Range(0,0,0,d[0].length);s.push(new B.CodeLens(w,{title:"\u25B6 Run Feature",command:"playwright-bdd.runScenarioDynamic",arguments:[r,this.enableFeatureGen]}))}for(let r=0;r<d.length;r++){let w=d[r].match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(w){let v;for(let i=r-1;i>=0;i--){let o=d[i].match(/^\s*@(\w+)/);if(o){v=`@${o[1]}`;break}else{if(d[i].trim()==="")continue;break}}let $=new B.Range(r,0,r,d[r].length),n=v??w[1];s.push(new B.CodeLens($,{title:"\u25B6 Run Scenario",command:"playwright-bdd.runScenarioDynamic",arguments:[n,this.enableFeatureGen]}))}}return s}};async function ee(e){console.log("Playwright BDD extension activated");let a=t.tests.createTestController("playwrightBdd","Playwright BDD Tests");e.subscriptions.push(a);let s=t.window.createOutputChannel("Playwright BDD");e.subscriptions.push(s);let m=t.workspace.getConfiguration("playwrightBdd"),d=m.get("featureFolder","features"),b=m.get("enableFeatureGen",!1),r=async n=>{a.items.replace([]);let i=await t.workspace.findFiles(`${d}/**/*.feature`);for(let o of i){let c=o.fsPath,h=J.basename(o.fsPath),u=a.createTestItem(c,h,o);a.items.add(u);let f=(await t.workspace.fs.readFile(o)).toString().split(`
`),g=null,l="";for(let p=0;p<f.length;p++){let k=f[p],C=k.match(/^\s*Scenario(?: Outline)?:\s*(.+)/);if(C){let T=C[1].trim();if(n&&!T.includes(n)&&!f[p-1]?.includes(n))continue;let L=`${o.fsPath}::${T}`,A=a.createTestItem(L,T,o);u.children.add(A),g=A,l=T}if(k.match(/^\s*Examples:/)&&g){let T=1,L=!1,A=[];for(let E=p+1;E<f.length;E++){let N=f[E].trim();if(N.startsWith("|")){let W=N.split("|").map(D=>D.trim()).filter(Boolean);if(!L){A=W,L=!0;continue}let Q=Object.fromEntries(A.map((D,x)=>[D,W[x]])),R=l;for(let[D,x]of Object.entries(Q))R=R.replace(new RegExp(`<${D}>`,"g"),x);if(console.log(g),g){let D=`${g.id}::${R}`,x=a.createTestItem(D,R,o);g.children.add(x)}T++}else if(N==="")break}}}}};await r(),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenarioDynamic",(n,i)=>{let o=t.workspace.getConfiguration("playwrightBdd"),c=o.get("configPath")||"./playwright.config.ts",h=o.get("tsconfigPath")||"",u=c,P=h||"",f=n?`--grep "${n}"`:"",g=o.get("featureGenCommand")||"npx bddgen --config=${configPath}",l=o.get("testCommand")||"npx playwright test ${tsconfigArg} --config=${configPath} ${tagsArg}";g=g.replace("${configPath}",u).replace("${tsconfigArg}",P).replace("${tagsArg}",f),l=l.replace("${configPath}",u).replace("${tsconfigArg}",P).replace("${tagsArg}",f);let p=t.window.createTerminal("Playwright BDD");p.show(),i?p.sendText(`${g} && ${l}`):p.sendText(l)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenario",n=>{let i=t.workspace.getConfiguration("playwrightBdd"),o=i.get("configPath")||"./playwright.config.ts",c=i.get("tsconfigPath")||"",h=c?`--project=${c}`:"",u=t.window.createTerminal("Playwright BDD");u.show(),u.sendText(`npx playwright test ${h} --config=${o} --grep "${n}"`)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runScenarioWithFeatureGen",n=>{let i=t.workspace.getConfiguration("playwrightBdd"),o=i.get("configPath")||"./playwright.config.ts",c=i.get("tsconfigPath")||"",h=n||i.get("tags")||"",u=o,P=c||"",f=h?`--grep "${h}"`:"",g=i.get("featureGenCommand")||"npx bddgen --config=${configPath}",l=i.get("testCommand")||"npx playwright test ${tsconfigArg} --config=${configPath} ${tagsArg}";g=g.replace("${configPath}",u).replace("${tsconfigArg}",P).replace("${tagsArg}",f),l=l.replace("${configPath}",u).replace("${tsconfigArg}",P).replace("${tagsArg}",f);let p=t.window.createTerminal("Playwright BDD");p.show(),p.sendText(`${g} && ${l}`)}));let w=t.workspace.createFileSystemWatcher(`${d}/**/*.feature`);w.onDidCreate(()=>r()),w.onDidChange(()=>r()),w.onDidDelete(()=>r()),e.subscriptions.push(w),a.createRunProfile("Run",t.TestRunProfileKind.Run,(n,i)=>{let o=a.createTestRun(n);if(s.show(!0),n.include)for(let c of n.include)o.enqueued(c),o.started(c),O(o,a,c,s);else O(o,a,void 0,s)},!0),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.runTests",()=>{O(void 0,a,void 0,s)})),e.subscriptions.push(t.languages.registerCodeLensProvider({language:"feature",scheme:"file"},new j(b))),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.terminateTests",()=>{H()})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.filterScenarios",async()=>{let n=await t.window.showInputBox({prompt:"Enter scenario name or tag to filter"});await r(n)})),e.subscriptions.push(t.commands.registerCommand("playwright-bdd.refreshTests",async()=>{let n=t.window.createStatusBarItem(t.StatusBarAlignment.Left);n.text="$(sync~spin) Refreshing features...",n.tooltip="Playwright BDD is refreshing tests",n.show();try{await r()}finally{setTimeout(()=>{n.hide(),n.dispose()},3e3)}}));let v=t.window.createStatusBarItem(t.StatusBarAlignment.Left);v.text="$(beaker) Run BDD Tests",v.command="playwright-bdd.runTests",v.tooltip="Run all Playwright BDD tests",v.show(),e.subscriptions.push(v);let $=t.window.createStatusBarItem(t.StatusBarAlignment.Left);$.text="$(debug-stop) Stop BDD Tests",$.command="playwright-bdd.terminateTests",$.tooltip="Terminate running Playwright BDD tests",$.show(),e.subscriptions.push($)}0&&(module.exports={activate});
