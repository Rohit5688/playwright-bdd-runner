{
  "name": "playwright-bdd-lens",
  "displayName": "BDD Test Runner",
  "description": "Run Playwright BDD tests directly from VS Code with Test Explorer integration and feature file support.",
  "version": "0.4.0",
  "publisher": "rohitsakhawalkar",
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Testing"
  ],
  "keywords": [
    "playwright",
    "bdd",
    "gherkin",
    "test runner",
    "feature files",
    "vscode",
    "testing"
  ],
  "icon": "images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Rohit5688/playwright-bdd-runner.git"
  },
  "bugs": {
    "url": "https://github.com/Rohit5688/playwright-bdd-runner/issues"
  },
  "homepage": "https://github.com/Rohit5688/playwright-bdd-runner#readme",
  "activationEvents": [
    "onLanguage:feature",
    "onCommand:playwright-bdd.runTests",
    "onCommand:playwright-bdd.showSettings",
    "workspaceContains:**/*.feature",
    "workspaceContains:playwright.config.*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "playwright-bdd.runTests",
        "title": "Run Playwright BDD Tests",
        "icon": "$(play)"
      },
      {
        "command": "playwright-bdd.runScenario",
        "title": "Run Scenario",
        "icon": "$(beaker)"
      },
      {
        "command": "playwright-bdd.runScenarioWithFeatureGen",
        "title": "Run Scenario with Feature Generation",
        "icon": "$(run-all)"
      },
      {
        "command": "playwright-bdd.terminateTests",
        "title": "Terminate Playwright BDD Tests",
        "icon": "$(beaker-stop)"
      },
      {
        "command": "playwright-bdd.runScenarioDynamic",
        "title": "Run Scenario or Feature (Dynamic)",
        "icon": "$(rocket)"
      },
      {
        "command": "playwright-bdd.refreshTests",
        "title": "Refresh BDD Tests",
        "icon": "$(refresh)"
      },
      {
        "command": "playwright-bdd.debugScenario",
        "title": "Debug Scenario",
        "icon": "$(debug)"
      },
      {
        "command": "playwright-bdd.showExecutionHistory",
        "title": "Show Test Execution History",
        "icon": "$(history)"
      },
      {
        "command": "playwright-bdd.showStepDefinitions",
        "title": "Show Step Definitions",
        "icon": "$(list-unordered)"
      },
      {
        "command": "playwright-bdd.validateStepCoverage",
        "title": "Validate Step Coverage",
        "icon": "$(check-all)"
      },
      {
        "command": "playwright-bdd.refreshStepDefinitions",
        "title": "Refresh Step Definitions",
        "icon": "$(refresh)"
      },
      {
        "command": "playwright-bdd.searchTests",
        "title": "Search Tests",
        "icon": "$(search)"
      },
      {
        "command": "playwright-bdd.exportSearchResults",
        "title": "Export Search Results",
        "icon": "$(export)"
      },
      {
        "command": "playwright-bdd.autoDiscoverConfig",
        "title": "Auto-Discover Configuration",
        "icon": "$(search)"
      },
      {
        "command": "playwright-bdd.validateConfiguration",
        "title": "Validate Configuration",
        "icon": "$(check)"
      },
      {
        "command": "playwright-bdd.createStepDefinition",
        "title": "Create Step Definition",
        "icon": "$(add)"
      },
      {
        "command": "playwright-bdd.createStepsFromFeature",
        "title": "Create Steps from Feature",
        "icon": "$(wand)"
      },
      {
        "command": "playwright-bdd.showQueueStatus",
        "title": "Show Queue Status",
        "icon": "$(list-ordered)"
      },
      {
        "command": "playwright-bdd.runTestsWithQueue",
        "title": "Run Tests with Queue",
        "icon": "$(play-circle)"
      },
      {
        "command": "playwright-bdd.startStepByStepDebugging",
        "title": "Start Step-by-Step Debugging",
        "icon": "$(debug-alt)"
      },
      {
        "command": "playwright-bdd.toggleBreakpoint",
        "title": "Toggle BDD Breakpoint",
        "icon": "$(circle-filled)"
      },
      {
        "command": "playwright-bdd.setConditionalBreakpoint",
        "title": "Set Conditional Breakpoint",
        "icon": "$(debug-breakpoint-conditional)"
      },
      {
        "command": "playwright-bdd.clearAllBreakpoints",
        "title": "Clear All BDD Breakpoints",
        "icon": "$(clear-all)"
      },
      {
        "command": "playwright-bdd.showWorkspaces",
        "title": "Show Workspaces",
        "icon": "$(workspace-unknown)"
      },
      {
        "command": "playwright-bdd.switchWorkspace",
        "title": "Switch Active Workspace",
        "icon": "$(folder-active)"
      },
      {
        "command": "playwright-bdd.searchAcrossWorkspaces",
        "title": "Search Across Workspaces",
        "icon": "$(search-view-icon)"
      },
      {
        "command": "playwright-bdd.runTestsAcrossWorkspaces",
        "title": "Run Tests Across Workspaces",
        "icon": "$(run-all)"
      },
      {
        "command": "playwright-bdd.createWorkspaceGroup",
        "title": "Create Workspace Group",
        "icon": "$(folder-library)"
      },
      {
        "command": "playwright-bdd.workspaceAnalytics",
        "title": "Workspace Analytics",
        "icon": "$(graph)"
      },
      {
        "command": "playwright-bdd.setupCICD",
        "title": "Setup CI/CD Integration",
        "icon": "$(gear)"
      },
      {
        "command": "playwright-bdd.manageWorkflows",
        "title": "Manage GitHub Workflows",
        "icon": "$(github)"
      },
      {
        "command": "playwright-bdd.showReports",
        "title": "View Test Reports",
        "icon": "$(file-text)"
      },
      {
        "command": "playwright-bdd.cicdStatus",
        "title": "CI/CD Status",
        "icon": "$(pulse)"
      },
      {
        "command": "playwright-bdd.treeView.runSelected",
        "title": "Run Selected Tests",
        "icon": "$(play)"
      },
      {
        "command": "playwright-bdd.treeView.debugSelected",
        "title": "Debug Selected Tests",
        "icon": "$(debug)"
      },
      {
        "command": "playwright-bdd.treeView.filterByTag",
        "title": "Filter by Tag",
        "icon": "$(tag)"
      },
      {
        "command": "playwright-bdd.treeView.filterByStatus",
        "title": "Filter by Status",
        "icon": "$(filter)"
      },
      {
        "command": "playwright-bdd.treeView.clearFilters",
        "title": "Clear Filters",
        "icon": "$(clear-all)"
      },
      {
        "command": "playwright-bdd.treeView.showResults",
        "title": "Show Results & Analytics",
        "icon": "$(graph)"
      },
      {
        "command": "playwright-bdd.showSettings",
        "title": "BDD Test Runner: Settings",
        "icon": "$(settings-gear)"
      },
      {
        "command": "playwright-bdd.treeView.showSettings",
        "title": "Settings",
        "icon": "$(settings-gear)"
      },
      {
        "command": "playwright-bdd.triggerGitHubWorkflow",
        "title": "Trigger GitHub Workflow",
        "icon": "$(rocket)"
      },
      {
        "command": "playwright-bdd.viewWorkflowStatus",
        "title": "View GitHub Workflow Status",
        "icon": "$(pulse)"
      },
      {
        "command": "playwright-bdd.insertStepTemplate",
        "title": "Insert Step Template",
        "icon": "$(add)"
      },
      {
        "command": "playwright-bdd.insertScenarioTemplate",
        "title": "Insert Scenario Template",
        "icon": "$(file-add)"
      },
      {
        "command": "playwright-bdd.validateFeatureStructure",
        "title": "Validate Feature Structure",
        "icon": "$(check)"
      },
      {
        "command": "playwright-bdd.formatFeatureFile",
        "title": "Format Feature File",
        "icon": "$(code)"
      },
      {
        "command": "playwright-bdd.extractScenarioOutline",
        "title": "Extract Scenario Outline",
        "icon": "$(symbol-variable)"
      },
      {
        "command": "playwright-bdd.findStepDefinition",
        "title": "Find Step Definition",
        "icon": "$(search)"
      },
      {
        "command": "playwright-bdd.runFeature",
        "title": "Run Feature",
        "icon": "$(play)"
      },
      {
        "command": "playwright-bdd.generateStepDefinitions",
        "title": "Generate Step Definitions",
        "icon": "$(wand)"
      },
      {
        "command": "playwright-bdd.formatTable",
        "title": "Format Table",
        "icon": "$(table)"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Playwright BDD Test Runner",
      "properties": {
        "playwrightBdd.configPath": {
          "type": "string",
          "default": "./playwright.config.ts",
          "description": "Path to the Playwright config file relative to the workspace root"
        },
        "playwrightBdd.tsconfigPath": {
          "type": "string",
          "default": "",
          "description": "Optional path to a custom tsconfig file for Playwright tests"
        },
        "playwrightBdd.tags": {
          "type": "string",
          "default": "",
          "description": "Optional value for feature/scenario tags to filter tests. Used as --grep=<tags>"
        },
        "playwrightBdd.featureGenCommand": {
          "type": "string",
          "default": "npx bddgen --config=${configPath}",
          "description": "Command to generate features. Use ${configPath} as a placeholder."
        },
        "playwrightBdd.testCommand": {
          "type": "string",
          "default": "npx playwright test ${tsconfigArg} --config=${configPath} ${tagsArg}",
          "description": "Command to run Playwright tests. Use ${configPath}, ${tsconfigArg}, and ${tagsArg} as placeholders."
        },
        "playwrightBdd.enableFeatureGen": {
          "type": "boolean",
          "default": true,
          "description": "Whether to run the feature generation step before tests"
        },
        "playwrightBdd.featureFolder": {
          "type": "string",
          "default": "features",
          "description": "Relative path to the folder containing .feature files"
        },
        "playwrightBdd.stepsFolder": {
          "type": "string",
          "default": "steps",
          "description": "Relative path to the folder containing step definition files"
        },
        "playwrightBdd.autoDiscoverConfig": {
          "type": "boolean",
          "default": true,
          "description": "Automatically discover Playwright config, feature folders, and step folders"
        },
        "playwrightBdd.stepsFilePattern": {
          "type": "string",
          "default": "**/*.{js,ts,mjs,mts}",
          "description": "Glob pattern for step definition files"
        },
        "playwrightBdd.cicd.githubToken": {
          "type": "string",
          "default": "",
          "description": "Personal Access Token for GitHub API access (stored securely)"
        },
        "playwrightBdd.cicd.autoTriggerWorkflows": {
          "type": "boolean",
          "default": false,
          "description": "Automatically trigger GitHub workflows on test execution"
        },
        "playwrightBdd.cicd.mode": {
          "type": "string",
          "enum": ["github", "gitlab", "azure", "jenkins", "custom"],
          "default": "github",
          "description": "CI/CD platform integration mode"
        },
        "playwrightBdd.cicd.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable CI/CD integration features"
        },
        "playwrightBdd.cicd.workflowPath": {
          "type": "string",
          "default": ".github/workflows",
          "description": "Path to CI/CD workflow files"
        },
        "playwrightBdd.ui.showTagFilters": {
          "type": "boolean",
          "default": true,
          "description": "Show tag filtering options in the test explorer"
        },
        "playwrightBdd.ui.showStatusFilters": {
          "type": "boolean",
          "default": true,
          "description": "Show status filtering options in the test explorer"
        },
        "playwrightBdd.ui.showExecutionHistory": {
          "type": "boolean",
          "default": true,
          "description": "Enable test execution history tracking"
        },
        "playwrightBdd.ui.autoRefreshInterval": {
          "type": "number",
          "default": 0,
          "description": "Interval for auto-refreshing test discovery (0 to disable)"
        },
        "playwrightBdd.execution.retryCount": {
          "type": "number",
          "default": 2,
          "minimum": 1,
          "maximum": 10,
          "description": "Number of retry attempts for failed test executions (1 = no retry, 2 = 1 retry, etc.)"
        },
        "playwrightBdd.execution.retryDelay": {
          "type": "number",
          "default": 2000,
          "minimum": 100,
          "maximum": 30000,
          "description": "Delay between retry attempts in milliseconds"
        }
      }
    },
    "testing": {
      "testControllers": [
        {
          "id": "playwrightBdd",
          "label": "Playwright BDD Tests"
        }
      ]
    },
    "languages": [
      {
        "id": "feature",
        "aliases": ["Gherkin", "gherkin", "Cucumber", "cucumber"],
        "extensions": [".feature"],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "feature",
        "scopeName": "text.gherkin.feature",
        "path": "./syntaxes/gherkin.tmGrammar.json"
      }
    ],
    "views": {
      "test": [
        {
          "id": "playwrightBddTests",
          "name": "BDD Test Explorer",
          "when": "workspaceFolderCount > 0"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "playwrightBddTests",
        "contents": "No BDD tests found.\n[Refresh Tests](command:playwright-bdd.refreshTests)\n[Auto-Discover Config](command:playwright-bdd.autoDiscoverConfig)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "playwright-bdd.refreshTests"
        },
        {
          "command": "playwright-bdd.showSettings"
        }
      ],
      "testing/item/context": [
        {
          "command": "playwright-bdd.refreshTests",
          "group": "navigation"
        }
      ],
      "view/title": [
        {
          "command": "playwright-bdd.terminateTests",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.refreshTests",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.treeView.filterByTag",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.treeView.filterByStatus",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.showExecutionHistory",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.treeView.showSettings",
          "group": "navigation"
        }
      ],
      "view/title@playwrightBddTests": [
        {
          "command": "playwright-bdd.treeView.runSelected",
          "when": "view == playwrightBddTests && bddTestsSelected",
          "group": "navigation@1"
        },
        {
          "command": "playwright-bdd.treeView.debugSelected",
          "when": "view == playwrightBddTests && bddTestsSelected",
          "group": "navigation@2"
        },
        {
          "command": "playwright-bdd.treeView.filterByTag",
          "when": "view == playwrightBddTests",
          "group": "1_filter@1"
        },
        {
          "command": "playwright-bdd.treeView.filterByStatus",
          "when": "view == playwrightBddTests",
          "group": "1_filter@2"
        },
        {
          "command": "playwright-bdd.treeView.clearFilters",
          "when": "view == playwrightBddTests",
          "group": "1_filter@3"
        },
        {
          "command": "playwright-bdd.treeView.showResults",
          "when": "view == playwrightBddTests",
          "group": "2_results@1"
        },
        {
          "command": "playwright-bdd.refreshTests",
          "when": "view == playwrightBddTests",
          "group": "3_refresh@1"
        },
        {
          "command": "playwright-bdd.treeView.showSettings",
          "when": "view == playwrightBddTests",
          "group": "4_settings@1"
        }
      ],
      "testing/item/context": [
        {
          "command": "playwright-bdd.refreshTests",
          "group": "navigation"
        },
        {
          "command": "playwright-bdd.treeView.runSelected",
          "group": "inline@1"
        },
        {
          "command": "playwright-bdd.treeView.debugSelected",
          "group": "inline@2"
        }
      ],
      "editor/context": [
        {
          "command": "playwright-bdd.insertStepTemplate",
          "when": "resourceExtname == .feature",
          "group": "bdd@1"
        },
        {
          "command": "playwright-bdd.insertScenarioTemplate",
          "when": "resourceExtname == .feature",
          "group": "bdd@2"
        },
        {
          "command": "playwright-bdd.validateFeatureStructure",
          "when": "resourceExtname == .feature",
          "group": "bdd@3"
        },
        {
          "command": "playwright-bdd.formatFeatureFile",
          "when": "resourceExtname == .feature",
          "group": "bdd@4"
        },
        {
          "command": "playwright-bdd.generateStepDefinitions",
          "when": "resourceExtname == .feature",
          "group": "bdd@5"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "npx playwright-bdd"
  },
  "devDependencies": {
    "@playwright/test": "^1.53.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "playwright-bdd": "^8.3.0",
    "typescript": "^5.8.3"
  }
}
